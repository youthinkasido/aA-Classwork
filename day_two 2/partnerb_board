an object-

class Example
    def initialize 
    end
end


 **Explain this ruby idiom: `a ||= b`**

 my_method(a = nil)
 a ||= b 



3. **What is unit testing? What is the primary technique when writing a test?**

smallest test cases

**Answer:**
Unit testing, simply put, is testing methods -- the smallest unit in object-oriented programming. 
The primary way to achieve this is to assert that the **actual** result of the method matches an **expected** result.


### OOP â€“ Parking Lot

### Prompt

Design a parking lot using object-oriented principles.

(Don't spend too much time fleshing out actual methods. Aim to give a
holistic view of which methods exist on each of the classes.)

require "floors"
require "vehicle"

class ParkingLot
    def initialize(floors)
    @floors = floors.times floors.new
    end

    def park_vehicle(vehicle, floor)
        if vehicle.size < 2
        @Compact_Spot << vehicle
        end
        elsif vehicle.size == 2
        @reg_spots << vehicle
        end
    end
end

require "spots"
class Floors
    def initialize(compact_spots, reg_spots)
        @compact_spots = compact_spot.new
        @reg_spots = reg_spots.new
    end
end

class Spots
    def initialize
    @spot = []
    end

end

class Compact_Spot < Spots
    def initialize
    @spot = [x]
    end
end

class Vehicle
    def initialize(vin)
    @vin = vin
    end
end


class motorcycle < Vehicle
    def initialize
        @size = 1
    end
end

class compact_car < Vehicle
    def initialize
        @size = 1
    end
end

class car < Vehicle
    def initialize
        @size = 2
    end
end

class bus < Vehicle





vehicle
    -compact cars
    -bus
    -cars
    -motorcycle
floors
    -
spaces
    -reg space
    -compact_space
    -bus_space  -maybe multiple spaces
    -compact spaces -motorcycle & compact_cars
handicap_spaces



class Vehicle
  attr_reader :spots_needed, :size

  def initialize(license_plate)
    @parking_spots = []
    @license_plate = license_plate
  end

  def park_in_spot(spot)
    # ...
  end

  def clear_spots
    # ...
  end

  def can_fit_in_spot(spot)
    # ...
  end
end

class Bus < Vehicle
  def initialize
    super
    @spots_needed = 5
    @size = :large
  end

  def can_fit_in_spot(spot)
    # Checks if spot is :large
  end
end

class Car < Vehicle
  def initialize
    super
    @spots_needed = 1
    @size = :compact
  end

  def can_fit_in_spot(spot)
    # Check if spot is :compact or :large
  end
end

class Motorcycle < Vehicle
  def initialize
    super
    @spots_needed = 1
    @size = :compact
  end
end

class ParkingLot
  def initialize
    @levels = # generate_levels
  end

  def park_vehicle(vehicle)
    # Park the vehicle in a spot or multiple spots. Return false if failed.
  end
end

class Level
  def initialize(floor, num_spots)
    @spots = # generate spots
    @available_spots = num_spots
    @floor = floor
  end

  def park_vehicle(vehicle)
    # Find a place to park vehicle or return false.
  end

  def park_starting_at(spot_num, vehicle)
    # Park a vehicle starting at spot number and continue until vehicle.spots_needed.
  end

  def find_available_spots(vehicle)
    # Find a spot to park the vehicle. Return index of spot or -1.
  end

  def spot_freed
    @available_spots += 1
  end
end

class ParkingSpot
  attr_reader :row, :spot_num

  def initialize(size, level, row, spot_num)
    @vehicle = nil
    @spot_size = size
    @level = level
    @row = row
    @spot_num = spot_num
  end

  def is_free?
    !@vehicle
  end

  def can_fit_vehicle?(vehicle)
    # Check it will fit.
  end

  def park(vehicle)
    # Park in spot
  end

  def unpark
    # Remove vehicle from spot and notify level that a new spot is available.
  end
end


## Implement DFS

For this problem assume there is a Node class. The node class will take in a value as part of its initialization. You will be monkeypatching the following method:

Write a method `dfs` that does a depth-first search starting at a root node. It takes in a target, and a proc as an argument.

Example usage:

```ruby
n1 = Node.new(1) #making a node with a value of 1

n1.dfs { |node| node.value == 1 } #=> n1 (found a node with value == 1)

def dfs(target, &prc)
    
    return self if self == target

    self.children.each do |child|
       node = child.dfs(target, &prc)
       return node if node == target
    end

    nil

    end


class Node

  # -- Assume nodes have a value, and a attr_reader on value
  # -- Also, assume there are working parent/child-related methods for Node
  def dfs(, &prc)

    raise "Must give a proc or target" if prc.nil?

    return self if prc.call(self)


    self.children.each do |node|
      node.dfs(target, &prc)
      
    end

    nil
  end
end

```
target = 6

sf3
self = 6

sf2
self = 3

sf1
self = 1


        1
      2   3
    4  5  6 7