what is a class?


factory for creating objects

classes hold data and have methods that interact with that data and are used to 
instantiate objects

self is reffering to the current instantiated instance of a class
self refers to the calls itself within the context of a class method

**Answer:**
`self` always refers to the current object. But this question is more difficult than it seems because Classes are also objects in ruby.

```rb

class WhatIsSelf
  def test
    puts "At the instance level, self is #{self}"
  end

  def self.test
    puts "At the class level, self is #{self}"
  end
end

WhatIsSelf.test
 #=> At the class level, self is WhatIsSelf

WhatIsSelf.new.test
 #=> At the instance level, self is #<WhatIsSelf:0x28190>

 what is the use of 'super'

 class a
 initialize(name,date,week,month)

end
end

 class b
 initialize(name,date,week,month,minute,second)### Prompt

Design a musical jukebox using object-oriented principles.
    super(name,date,week,month)
    @minute
end


It calls a method on the parent class with the same name as the method that calls `super`.


design musical jukebox
### Prompt

Design a musical jukebox using object-oriented principles.

- virtual itunes, free or charge
- pick a song from library 
- skip to next song or go back a song
- pause song or playlist
- delete song or playlist
- add song to playlist
doesnt need currency
Play class 


Class Library
    def initialize(playlist,library)
    @playlists = Playlist.new


end

class Album
    def initialize
    
    end
end

class Playlist
def initialize(playlist, library = Library.new)
    @playlist = []
    @library = library
end

def add_song(song)

end

def delete_song(song)

end

def play_song(song)

end

def pause_song(song)

end

def rewind(song)

end

def fast_foward(song)

end

def delete_playlist(playlist)

end

def song
    def initialize

    end
end

_________________________________________________________
### OOP â€“ Jukebox

### Prompt

Design a musical jukebox using object-oriented principles.

### Solution

Here are some answers to questions the interviewee might ask:

##### Is the jukebox physical or virtual?

Assume the jukebox is virtual or computer-simulated.

##### Does the jukebox accept currency?

Assume the jukebox operates free of charge.

Here is the skeleton of a potential solution:

```ruby
class Jukebox
  attr_accessor :user
  attr_reader :current_track

  def initialize(player, user)
    @player = player
    @user = user
    @current_track = nil
  end
end

class Player
  attr_accessor :album, :playlist

  def initialize(album, playlist)
    @album = album
    @playlist = playlist
  end

  def play_track(track)
    # Begin playing...
  end
end

class Playlist
  def initialize
    @queue = []
  end

  def add_track(track)
    @queue.push(track)
  end

  def shift
    @queue.shift
  end
end

class Album
  # Information about the album
end

class Track
  # Information about the track, including album
end

class User
  # Information about the user.
end
_______________________________________________________


next song
previous song
playlists
shuffle playlists
class 

Class Playlists
    Initialize(songs)

end



## Implement BFS

For this problem assume there is a Node class. The node class will take in a value as part of its initialization. You will be monkeypatching the following method:

Write a method `bfs` that does a breadth-first search starting at a root node. It takes in a target, and a proc as an argument.

Example usage:

```ruby
n1 = Node.new(1) making a node with a value of 1

n1.bfs(1) #=> n1

```

class Node
def bfs(&prc)

queue = [self]
    
    until queue.empty?
    el = queue.shift
    return el if el == target
    queue << el.children.each{|child| child }
    end
    nil
end

  def bfs(&prc)
    raise "Must give a proc or target" if prc.nil?

    queue = [self]

    until queue.empty?
      visited = queue.shift
      return visited if prc.call(visited)
      queue += visited.children
    end

    nil
  end
end

        1
      2   3
    4  5  6 7

